
% Crea le rappresentazioni BOW dei dataframe Train e Val

function [BOWTR, labelsTR, BOWVAL, labelsVAL] = BOWCreator(Train,Val,featStep,imsize,featureFuncs,K)

if isempty(featStep)
    featStep = 5;
end
if isempty(imsize)
    imsize = 200;
end
if isempty(featureFuncs)
    featureFuncs = ['SURF'];
end
if isempty(K)
    K = 100;
end

%% creazione estrazione features training
[ii, jj] = meshgrid(featStep:featStep:imsize-featStep, featStep:featStep:imsize-featStep);
pointPositions = [ii(:), jj(:)];
features=[];
labels=[];

for idx = 1:numel(Train.Files)
    im = readimage(Train,idx);
    class = Train.Labels(idx);
    im = im2double(im);
    im = imresize(im,[imsize imsize]);
    im = rgb2gray(im);
    imageFeatures = [];


    for func = featureFuncs
        [extractedFeature,~] = extractFeatures(im,pointPositions,'Method',func);
        if isstruct(extractedFeature)
            extractedFeature = extractedFeature.Features;
        end
        imageFeatures = [imageFeatures, extractedFeature(:)'];
    end
    features = [features; imageFeatures];
    labels = [labels;repmat(class,size(imagefeatures,1),1);repmat(idx,size(imfeatures,1),1)];
end
%% creazione vocabolario
[IDX,C]=kmeans(features,K);
%% istogrammi training
for idx = 1:numel(Train.Files)
    class = Train.Labels(idx);
    u=find(labels(:,1)==class & labels(:,2)==idx);
    imfeaturesIDX=IDX(u);
    H=hist(imfeaturesIDX,1:K);
    H=H/sum(H);
    BOW_tr=[BOW_tr; H];
    labels_tr=[labels_tr; class];
end

%% istogrammi validation
for idx = 1:numel(Val.Files)
    class = Val.Labels(idx);
    im = im2double(im);
    im = imresize(im,[imsize imsize]);
    im = rgb2gray(im);
    imageFeatures = [];
    for func = featureFuncs
        [extractedFeature,~] = extractFeatures(im,pointPositions,'Method',func);
        if isstruct(extractedFeature)
            extractedFeature = extractedFeature.Features;
        end
        imageFeatures = [imageFeatures, extractedFeature(:)'];
    end
    D = pdist2(imageFeatures, C);
    [~,words] = min(D,[],2);
    H = hist(words,1:K);
    H = H./sum(H);
    BOW_va = [BOW_va;H];
    labels_va = [labels_va;class];
end
%% return
BOWTR = BOW_tr;
labelsTR = labels_tr;
BOWVAL = BOW_va;
labelsVAL = labels_va;

end